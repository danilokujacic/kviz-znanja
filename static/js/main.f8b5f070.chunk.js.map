{"version":3,"sources":["assets/geography.png","assets/history.jpg","assets/social.png","assets/music.jpg","fakeProvider/data.js","components/header/index.tsx","components/play/index.tsx","components/chooseQuiz/index.tsx","components/chooseQuiz/Component.tsx","components/Alertbox/index.tsx","components/login/index.tsx","components/register/index.tsx","App.tsx","redux/index.ts","index.tsx"],"names":["module","exports","types","name","image","geography","history","social","music","questions","question","answers","answer","correct","connect","state","ownProps","user","quiz","dispatch","goBack","type","removeUser","useHistory","className","style","cursor","onClick","push","points","sessionStorage","removeItem","to","Play","activateQuiz","React","useState","quizes","setQuizes","quizHandler","useEffect","setTimeout","map","index","key","backgroundImage","animation","zIndex","pathname","auth","reducer","processAnswer","initLoading","payload","setUser","data","setQuiz","params","useParams","useReducer","setQuestions","indexN","setIndex","setPoints","a","fetch","component","toLowerCase","then","json","fetchQuiz","handleAnswer","ans","divs","document","querySelectorAll","classList","add","correctInd","findIndex","obj","Promise","res","method","mode","cache","credentials","headers","Authorization","getItem","redirect","referrerPolicy","body","JSON","stringify","forEach","div","remove","AlertBox","message","inSide","setAlert","loading","setLoading","setAnimation","top","username","password","submitHandler","e","preventDefault","response","status","setItem","token","onSubmit","onChange","target","value","alert","useLocation","listen","location","User","getUser","defaultPath","exact","path","initialState","store","createStore","createBrowserHistory","render","getElementById"],"mappings":"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","file":"static/js/main.f8b5f070.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/geography.3e78c53f.png\";","module.exports = __webpack_public_path__ + \"static/media/history.5a99e060.jpg\";","module.exports = __webpack_public_path__ + \"static/media/social.8c6b6452.png\";","module.exports = __webpack_public_path__ + \"static/media/music.1376d7e4.jpg\";","import geography from '../assets/geography.png';\r\nimport history from '../assets/history.jpg';\r\nimport social from '../assets/social.png';\r\nimport music from '../assets/music.jpg';\r\nexport const types = [\r\n    {\r\n        name: 'Geography',\r\n        image: geography,\r\n    },\r\n    {\r\n        name: 'History',\r\n        image: history,\r\n    },\r\n    {\r\n        name: 'Social',\r\n        image: social,\r\n    },\r\n    {\r\n        name: 'Music',\r\n        image: music,\r\n    },\r\n];\r\nexport const questions = [\r\n    {\r\n        question: 'RARARA',\r\n        answers: [\r\n            {\r\n                answer: 'Yea',\r\n                correct: true,\r\n            },\r\n            {\r\n                answer: 'Yea',\r\n                correct: true,\r\n            },\r\n            {\r\n                answer: 'Yea',\r\n                correct: true,\r\n            },\r\n            {\r\n                answer: 'Yea',\r\n                correct: true,\r\n            },\r\n        ],\r\n    },\r\n];\r\nexport const users = [\r\n    {\r\n        name: 'Danilo',\r\n        points: 0,\r\n        password: 'logika123',\r\n    },\r\n];\r\n","import React from 'react';\r\nimport User from '../../interfaces/User';\r\nimport { connect } from 'react-redux';\r\nimport State from '../../interfaces/State';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { setupMaster } from 'cluster';\r\n\r\ninterface IProps {\r\n    user: User | null;\r\n    quiz: boolean;\r\n    goBack: Function;\r\n    removeUser: Function;\r\n}\r\n\r\nconst mapStateToProps = (state: State, ownProps: object) => ({\r\n    user: state.user,\r\n    quiz: state.quiz,\r\n});\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n    goBack: () => dispatch({ type: 'FINISH_QUIZ' }),\r\n    removeUser: () => dispatch({ type: 'REMOVE_USER' }),\r\n});\r\n\r\nconst Header: React.FC<IProps> = ({ user, quiz, goBack, removeUser }) => {\r\n    const history = useHistory();\r\n    const handleLogOut = () => {\r\n        sessionStorage.removeItem('user_token');\r\n        removeUser();\r\n        history.push('/');\r\n    };\r\n    const handleBack = () => {\r\n        history.push('/');\r\n        goBack();\r\n    };\r\n    return (\r\n        <div className='header'>\r\n            <div className='user-header-text'>\r\n                {user ? (\r\n                    !quiz ? (\r\n                        <span>\r\n                            Hello {user.name},{user.points} points\r\n                        </span>\r\n                    ) : (\r\n                        <span\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={handleBack}>\r\n                            Go back\r\n                        </span>\r\n                    )\r\n                ) : (\r\n                    <span>Hello there, guest!</span>\r\n                )}\r\n            </div>\r\n            {!user ? (\r\n                <div className='login-register'>\r\n                    <Link to='/login'>Login</Link>\r\n                    <Link to='/register'>Register</Link>\r\n                </div>\r\n            ) : (\r\n                <div className='login-register'>\r\n                    <Link onClick={handleLogOut} to='/'>\r\n                        Logout\r\n                    </Link>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from 'react';\r\nimport User from '../../interfaces/User';\r\nimport { Link } from 'react-router-dom';\r\nimport gsap from 'gsap';\r\n\r\nconst Play: React.FC = () => {\r\n    return (\r\n        <div className='start-quiz'>\r\n            <Link to='/choose-quiz'>Start</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Play;\r\n","import React from 'react';\r\nimport User from '../../interfaces/User';\r\nimport { types } from '../../fakeProvider/data';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface IProps {\r\n    activateQuiz: Function;\r\n}\r\nconst ChooseQuizComponent: React.FC<IProps> = ({ activateQuiz }) => {\r\n    const [quizes, setQuizes] = React.useState<\r\n        { name: string; image: string }[]\r\n    >();\r\n    const quizHandler = () => setQuizes(types);\r\n    React.useEffect(() => {\r\n        setTimeout(quizHandler, 50);\r\n    }, []);\r\n    return (\r\n        <div className='quiz-selection'>\r\n            {quizes &&\r\n                quizes.map((quiz, index) => (\r\n                    <div\r\n                        key={index}\r\n                        style={{\r\n                            backgroundImage: `url(${quiz.image})`,\r\n                            animation: `roll-in 0.5s ease-in forwards ${\r\n                                index / 4\r\n                            }s`,\r\n                        }}\r\n                        className='quiz quiz-animate'>\r\n                        <Link\r\n                            onClick={() => activateQuiz()}\r\n                            className='quiz-title'\r\n                            style={{ zIndex: 1 }}\r\n                            to={{\r\n                                pathname: `/quiz/${quiz.name}`,\r\n                                state: {\r\n                                    auth: true,\r\n                                },\r\n                            }}>\r\n                            <span>{quiz.name}</span>\r\n                        </Link>\r\n                    </div>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n    activateQuiz: () => dispatch({ type: 'START_QUIZ' }),\r\n});\r\n\r\nexport default connect(() => ({}), mapDispatchToProps)(ChooseQuizComponent);\r\n","import React, { useState, useReducer } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useLocation, useHistory, useParams } from 'react-router-dom';\r\nimport State from '../../interfaces/State';\r\nimport { setupMaster } from 'cluster';\r\n\r\ninterface IProps {\r\n    quiz: boolean;\r\n    setUser: Function;\r\n    setQuiz: Function;\r\n}\r\n\r\nconst reducer = (\r\n    state = {\r\n        processAnswer: false,\r\n        initLoading: false,\r\n    },\r\n    { type, payload }: { type: string; payload?: object },\r\n) => {\r\n    if (type === 'SET_LOADING') {\r\n        return { ...state, initLoading: true };\r\n    }\r\n    if (type === 'FINISH_LOADING') {\r\n        return { ...state, initLoading: false };\r\n    }\r\n    if (type === 'RESET_LOADING') {\r\n        return { ...state, initLoading: false };\r\n    }\r\n    return state;\r\n};\r\n\r\nconst History: React.FC<IProps> = ({ quiz, setUser, setQuiz }) => {\r\n    const params = useParams<{ component: string }>();\r\n    const history = useHistory();\r\n\r\n    const [state, dispatch] = useReducer(reducer, {\r\n        processAnswer: false,\r\n        initLoading: false,\r\n    });\r\n    const [questions, setQuestions] = useState<\r\n        {\r\n            question: string;\r\n            answers: {\r\n                answer: string;\r\n                correct: boolean;\r\n            }[];\r\n        }[]\r\n    >();\r\n    const [indexN, setIndex] = useState<number>(0);\r\n    let [points, setPoints] = useState<number>(0);\r\n    React.useEffect(() => {\r\n        if (quiz === false) return history.push('/');\r\n\r\n        const fetchQuiz = async () => {\r\n            const data = await fetch(\r\n                'http://localhost:3000/quiz/' + params.component.toLowerCase(),\r\n            ).then((data) => data.json());\r\n\r\n            setQuestions(data.questions);\r\n        };\r\n        fetchQuiz();\r\n    }, []);\r\n\r\n    const handleAnswer = async (ans: { correct: boolean }, index: number) => {\r\n        const divs = document.querySelectorAll('.answers div');\r\n        if (ans.correct) {\r\n            (divs[index] as HTMLDivElement).classList.add('correct');\r\n            points += 5;\r\n            setPoints(points);\r\n        } else {\r\n            points -= 3;\r\n            setPoints(points);\r\n            if (questions && questions[indexN] && questions[indexN].answers) {\r\n                const correctInd = questions[indexN].answers.findIndex(\r\n                    (obj) => obj.correct === true,\r\n                );\r\n                (divs[correctInd] as HTMLDivElement).classList.add('correct');\r\n            }\r\n            divs[index].classList.add('wrong');\r\n        }\r\n        dispatch({ type: 'SET_LOADING' });\r\n        await new Promise((res) =>\r\n            setTimeout(() => res(dispatch({ type: 'FINISH_LOADING' })), 3000),\r\n        );\r\n\r\n        if (questions && !questions[indexN + 1]) {\r\n            fetch('http://localhost:3000/update', {\r\n                method: 'PUT', // *GET, POST, PUT, DELETE, etc.\r\n                mode: 'cors', // no-cors, *cors, same-origin\r\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n                credentials: 'same-origin', // include, *same-origin, omit\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization:\r\n                        'Bearer ' + sessionStorage.getItem('user_token'),\r\n                },\r\n                redirect: 'follow', // manual, *follow, error\r\n                referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n                body: JSON.stringify({\r\n                    points,\r\n                }), // body data type must match \"Content-Type\" header\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    setUser({ name: data.user, points: data.points });\r\n                    setQuiz();\r\n                    history.push('/');\r\n                    divs.forEach((div) => {\r\n                        div.classList.remove('correct');\r\n                        div.classList.remove('wrong');\r\n                    });\r\n                });\r\n        } else {\r\n            divs.forEach((div) => {\r\n                div.classList.remove('correct');\r\n                div.classList.remove('wrong');\r\n            });\r\n            setIndex(indexN + 1);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {questions ? (\r\n                questions[indexN] ? (\r\n                    <div className='question-div'>\r\n                        {state.initLoading ? (\r\n                            <div className='quiz-alert'>\r\n                                Procesuiram sledece pitanje...\r\n                            </div>\r\n                        ) : null}\r\n                        <div className='questions'>\r\n                            <div className='question'>\r\n                                {questions[indexN].question}\r\n                            </div>\r\n                            <div className='answers'>\r\n                                {questions[indexN].answers.map(\r\n                                    (answer, index) => (\r\n                                        <div\r\n                                            onClick={() => {\r\n                                                handleAnswer(answer, index);\r\n                                            }}\r\n                                            key={index}>\r\n                                            {answer.answer}\r\n                                        </div>\r\n                                    ),\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <div>No more questions for you bro!</div>\r\n                )\r\n            ) : (\r\n                <div>Loading...</div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    quiz: state.quiz,\r\n});\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n    setUser: (data: object) => {\r\n        return dispatch({\r\n            type: 'SET_USER',\r\n            payload: { ...data },\r\n        });\r\n    },\r\n    setQuiz: () => {\r\n        dispatch({\r\n            type: 'FINISH_QUIZ',\r\n        });\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(History);\r\n","import React, { Fragment } from 'react';\r\n\r\ninterface IProps {\r\n    message: string;\r\n    inSide: boolean;\r\n    setAlert: Function;\r\n}\r\n\r\nconst AlertBox: React.FC<IProps> = ({ message, inSide, setAlert }) => {\r\n    const [loading, setLoading] = React.useState(false);\r\n    React.useEffect(() => {\r\n        if (inSide) {\r\n            setLoading(true);\r\n            setTimeout(() => {\r\n                const setAnimation = async () => {\r\n                    setLoading(false);\r\n                    await new Promise((res) => setTimeout(res, 250));\r\n                    setAlert(false);\r\n                };\r\n                setAnimation();\r\n            }, 3000);\r\n        }\r\n    }, [inSide]);\r\n    return (\r\n        <Fragment>\r\n            {inSide && (\r\n                <div\r\n                    style={{\r\n                        top: inSide ? 'initial' : '-100px',\r\n                        animation: `${\r\n                            loading ? 'slide-in' : 'slide-out'\r\n                        } 0.5s cubic-bezier(0.445, 0.05, 0.55, 0.95)`,\r\n                    }}\r\n                    className='alert-box'>\r\n                    {message}\r\n                </div>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AlertBox;\r\n","import React, { useReducer, ChangeEvent, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setupMaster } from 'cluster';\r\nimport { useHistory } from 'react-router-dom';\r\nimport State from '../../interfaces/State';\r\nimport User from '../../interfaces/User';\r\n\r\nconst reducer = (\r\n    state = { username: '', password: '' },\r\n    { type, payload }: { type: string; payload: string },\r\n) => {\r\n    if (type === 'CHANGE_USERNAME') {\r\n        return {\r\n            ...state,\r\n            username: payload,\r\n        };\r\n    }\r\n    if (type === 'CHANGE_PASSWORD') {\r\n        return {\r\n            ...state,\r\n            password: payload,\r\n        };\r\n    }\r\n    return state;\r\n};\r\n\r\ninterface IProps {\r\n    user: User | null;\r\n    setUser: Function;\r\n}\r\nconst Login: React.FC<IProps> = ({ user, setUser }) => {\r\n    const history = useHistory();\r\n    React.useEffect(() => {\r\n        if (user) {\r\n            history.push('/');\r\n        }\r\n    }, []);\r\n    const [state, dispatch] = useReducer(reducer, {\r\n        username: '',\r\n        password: '',\r\n    });\r\n    const handleUsername = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch({\r\n            type: 'CHANGE_USERNAME',\r\n            payload: e.target.value as string,\r\n        });\r\n    };\r\n    const handlePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch({\r\n            type: 'CHANGE_PASSWORD',\r\n            payload: e.target.value as string,\r\n        });\r\n    };\r\n    const submitHandler = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        const response = await fetch(\r\n            'http://danilokujacic.github.io/kviz-znanja-server/login',\r\n            {\r\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n                mode: 'cors', // no-cors, *cors, same-origin\r\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n                credentials: 'same-origin', // include, *same-origin, omit\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                redirect: 'follow', // manual, *follow, error\r\n                referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n                body: JSON.stringify(state), // body data type must match \"Content-Type\" header\r\n            },\r\n        ).then((res) => res.json());\r\n\r\n        if (response.name) {\r\n            const { status, name, points } = response;\r\n            if (status === 'Logged in') {\r\n                sessionStorage.setItem('user_token', response.token);\r\n                setUser({\r\n                    name,\r\n                    points,\r\n                });\r\n                history.push('/');\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <div className='login-div'>\r\n            <form onSubmit={submitHandler}>\r\n                <div>\r\n                    <label>Username</label>\r\n                    <input type='text' onChange={handleUsername} />\r\n                </div>\r\n                <div>\r\n                    <label>Login</label>\r\n                    <input type='password' onChange={handlePassword} />\r\n                </div>\r\n                <div>\r\n                    <button type='submit'>Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State, ownProps: object) => ({\r\n    user: state.user,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n    setUser: (data: object) =>\r\n        dispatch({ type: 'SET_USER', payload: { ...data } }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React, { useReducer, ChangeEvent, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setupMaster } from 'cluster';\r\nimport { useHistory } from 'react-router-dom';\r\nimport State from '../../interfaces/State';\r\nimport User from '../../interfaces/User';\r\n\r\nconst reducer = (\r\n    state = { username: '', password: '' },\r\n    { type, payload }: { type: string; payload: string },\r\n) => {\r\n    if (type === 'CHANGE_USERNAME') {\r\n        return {\r\n            ...state,\r\n            username: payload,\r\n        };\r\n    }\r\n    if (type === 'CHANGE_PASSWORD') {\r\n        return {\r\n            ...state,\r\n            password: payload,\r\n        };\r\n    }\r\n    return state;\r\n};\r\n\r\ninterface IProps {\r\n    user: User | null;\r\n    setUser: Function;\r\n}\r\nconst Login: React.FC<IProps> = ({ user, setUser }) => {\r\n    const history = useHistory();\r\n    React.useEffect(() => {\r\n        if (user) {\r\n            history.push('/');\r\n        }\r\n    }, []);\r\n    const [state, dispatch] = useReducer(reducer, {\r\n        username: '',\r\n        password: '',\r\n    });\r\n    const handleUsername = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch({\r\n            type: 'CHANGE_USERNAME',\r\n            payload: e.target.value as string,\r\n        });\r\n    };\r\n    const handlePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch({\r\n            type: 'CHANGE_PASSWORD',\r\n            payload: e.target.value as string,\r\n        });\r\n    };\r\n    const submitHandler = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        const response = await fetch('http://localhost:3000/register', {\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n            body: JSON.stringify(state), // body data type must match \"Content-Type\" header\r\n        }).then((res) => res.json());\r\n\r\n        if (response.name) {\r\n            const { status, name, points } = response;\r\n            if (status === 'Logged in') {\r\n                sessionStorage.setItem('user_token', response.token);\r\n\r\n                setUser({\r\n                    name,\r\n                    points,\r\n                });\r\n                history.push('/');\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <div className='login-div'>\r\n            <form onSubmit={submitHandler}>\r\n                <div>\r\n                    <label>Username</label>\r\n                    <input type='text' onChange={handleUsername} />\r\n                </div>\r\n                <div>\r\n                    <label>Password</label>\r\n                    <input type='password' onChange={handlePassword} />\r\n                </div>\r\n                <div>\r\n                    <button type='submit'>Register</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State, ownProps: object) => ({\r\n    user: state.user,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n    setUser: (data: object) =>\r\n        dispatch({ type: 'SET_USER', payload: { ...data } }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { questions as data } from './fakeProvider/data';\nimport Question from './interfaces/Questions';\nimport User from './interfaces/User';\nimport Header from './components/header';\nimport { Switch, Route, useHistory, Redirect, useLocation } from 'react-router';\nimport State from './interfaces/State';\nimport PlayComponent from './components/play';\nimport ChooseQuizComponent from './components/chooseQuiz';\nimport History from './components/chooseQuiz/Component';\n\nimport { connect } from 'react-redux';\nimport AlertBox from './components/Alertbox';\n\nimport Login from './components/login';\nimport Register from './components/register';\n\ninterface IProps {\n    user: User | null;\n    setUser: Function;\n}\n\nconst App: React.FC<IProps> = ({ user, setUser }) => {\n    const [, setQuestions] = useState<Question[]>();\n    const [alert, setAlert] = useState<boolean>(false);\n    const history = useHistory();\n    const location = useLocation();\n    useEffect(() => {\n        history.listen((location) => {\n            if (\n                location.pathname !== '/' &&\n                location.pathname !== '/login' &&\n                location.pathname !== '/register'\n            ) {\n                if (!sessionStorage.getItem('user_token')) {\n                    history.push('/');\n                    if (!alert) {\n                        setAlert(true);\n                    }\n                } else {\n                    async function User() {\n                        const response = await fetch(\n                            'http://localhost:3000/verify',\n                            {\n                                method: 'POST',\n                                headers: {\n                                    'Content-type': 'application/json',\n                                    Authorization:\n                                        'Bearer ' +\n                                        sessionStorage.getItem('user_token'),\n                                },\n                            },\n                        )\n                            .then((res) => res.json())\n                            .then((data) => data);\n                        if (\n                            !response.status ||\n                            response.status !== 'Approved'\n                        ) {\n                            history.push('/');\n                            if (!alert) {\n                                setAlert(true);\n                            }\n                        }\n                    }\n                    User();\n                }\n            }\n        });\n        if (sessionStorage.getItem('user_token')) {\n            async function getUser() {\n                const response = await fetch('http://localhost:3000/verify', {\n                    method: 'POST',\n                    headers: {\n                        'Content-type': 'application/json',\n                        Authorization:\n                            'Bearer ' + sessionStorage.getItem('user_token'),\n                    },\n                })\n                    .then((res) => res.json())\n                    .then((data) => data);\n\n                if (response.status === 'Approved') {\n                    setUser({\n                        name: response.name,\n                        points: response.points,\n                    });\n                } else if (history.location.pathname !== '/login') {\n                    history.push('/');\n                }\n            }\n            getUser();\n        } else if (\n            history.location.pathname !== '/login' &&\n            history.location.pathname !== '/register'\n        ) {\n            history.push('/');\n        }\n\n        setTimeout(() => {\n            setQuestions(data);\n        }, 50);\n        //eslint-disable-next-line\n    }, []);\n    return (\n        <Fragment>\n            <Fragment>\n                <AlertBox\n                    setAlert={setAlert}\n                    inSide={alert}\n                    message='You must register/login to proceed'\n                />\n\n                <Header />\n\n                <Switch>\n                    <Route defaultPath exact path='/'>\n                        <PlayComponent />\n                    </Route>\n                    <Route exact path='/choose-quiz'>\n                        <ChooseQuizComponent />\n                    </Route>\n                    <Route exact path='/login'>\n                        <Login />\n                    </Route>\n                    <Route exact path='/register'>\n                        <Register />\n                    </Route>\n                    <Route exact path='/quiz/:component'>\n                        <History />\n                    </Route>\n\n                    <Redirect to='/' />\n                </Switch>\n            </Fragment>\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = (state: State) => ({\n    user: state.user,\n});\nconst mapDispatchToProps = (dispatch: Function) => ({\n    setUser: (data: User) =>\n        dispatch({ type: 'SET_USER', payload: { ...data } }),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createStore } from 'redux';\r\nimport State from '../interfaces/State';\r\nimport User from '../interfaces/User';\r\n\r\nconst initialState: State = {\r\n    user: null,\r\n    quiz: false,\r\n};\r\n\r\nconst quizzReducer = (\r\n    state = initialState,\r\n    { type, payload }: { type: string; payload: object },\r\n) => {\r\n    if (type === 'START_QUIZ') {\r\n        return {\r\n            ...state,\r\n            quiz: true,\r\n        };\r\n    }\r\n    if (type === 'FINISH_QUIZ') {\r\n        return {\r\n            ...state,\r\n            quiz: false,\r\n        };\r\n    }\r\n    if (type === 'REMOVE_USER') {\r\n        return {\r\n            ...state,\r\n            user: null,\r\n        };\r\n    }\r\n    if (type === 'SET_USER') {\r\n        return {\r\n            ...state,\r\n            user: { ...(payload as User) },\r\n        };\r\n    }\r\n    return state;\r\n};\r\n\r\nconst store = createStore(quizzReducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './assets/index.css';\nimport App from './App';\nimport { Router } from 'react-router';\nimport { createBrowserHistory } from 'history';\nimport { Provider } from 'react-redux';\nimport store from './redux';\nconst history = createBrowserHistory();\nrender(\n    <Router history={history}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </Router>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}